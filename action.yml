name: 'Manjaro Package Action'
description: 'Builds Manjaro Packages'

inputs:
  package_list:
    description: 'name of the build-list file'
    required: true
  release_tag:
    description: 'version of release'
    required: true
  source:
    description: 'repo source'
    required: true
  branch:
    description: 'branch to build against'
    default: stable
    required: false
  custom-repo:
    description: 'custom repo'
    required: false
  gpg-key:
    description: 'gpg signing key'
    required: true
  gpg-passphrase:
    description: 'gpg passphrase'
    required: true
  boxit-host:
    description: 'boxit host'
    required: false
  boxit-target:
    description: 'boxit rsync target'
    required: false
  ssh-key:
    description: 'boxit user ssh private key'
    required: false

runs:
  using: "composite"
  steps:
    - name: install build-dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install \
        build-essential \
        cmake \
        fakeroot \
        git \
        libarchive-dev \
        libarchive-tools \
        libcurl4-openssl-dev \
        libgpgme-dev \
        libssl-dev \
        zip \
        python3-pip
        sudo pip3 install meson
        sudo pip3 install ninja
    - name: install pacman
      shell: bash
      env:
        PACMAN_VERSION: 6.0.1
      run: |
        sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/pacman.git
        pushd pacman
        sudo wget https://sources.archlinux.org/other/pacman/pacman-${PACMAN_VERSION}.tar.xz
        sudo tar -xvf pacman-${PACMAN_VERSION}.tar.xz
        pushd pacman-${PACMAN_VERSION}
        sudo patch -p1 -i ../pacman-sync-first-option.patch
        sudo meson --prefix=/usr \
                    --buildtype=plain \
                    -Ddoc=disabled \
                    -Ddoxygen=enabled \
                    -Dscriptlet-shell=/usr/bin/bash \
                    -Dldconfig=/usr/bin/ldconfig \
                    build
        sudo meson compile -C build
        sudo meson install -C build
        popd
        sudo install -m644 pacman.conf /etc/pacman.conf
        sudo install -m644 makepkg.conf /etc/
        sudo mkdir -p /etc/pacman.d
        sudo touch /etc/pacman.d/mirrorlist
        popd
        sudo rm -rf pacman
    - name: install keyrings
      shell: bash
      run: |
        sudo install -dm755 /usr/share/pacman/keyrings/
        sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/manjaro-keyring.git
        pushd manjaro-keyring
          sudo install -m0644 manjaro.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 manjaro-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 manjaro-trusted /usr/share/pacman/keyrings/
        popd
        sudo rm -rf manjaro-keyring
        mkdir -p archlinux-keyring
        pushd archlinux-keyring
          wget https://archlinux.org/packages/core/any/archlinux-keyring/download -O /tmp/archlinux-keyring.tar.zst
          tar --use-compress-program=unzstd --strip-components=4 --wildcards -xvf /tmp/archlinux-keyring.tar.zst usr/share/pacman/keyrings/*
          sudo install -m0644 archlinux.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-revoked /usr/share/pacman/keyrings/
        popd
        sudo rm -rf archlinux-keyring
        sudo pacman-key --init
        sudo pacman-key --populate archlinux manjaro
    - name: install manjaro-chrootbuild
      shell: bash
      run: |
        sudo git clone --depth 1 https://gitlab.manjaro.org/tools/development-tools/manjaro-chrootbuild
        pushd manjaro-chrootbuild
        sudo ./install.sh
        echo "PACKAGER = Manjaro Build Server <build@manjaro.org>" | sudo tee -a /etc/makepkg.conf > /dev/null
        popd
        sudo rm -rf manjaro-chrootbuild
    - name: clone packages repo
      shell: bash
      run: |
        source=${{ inputs.source }}
        sudo git clone ${source}
    - name: build package_list
      shell: bash
      run: |
        build_opt=("-l ${{ inputs.package_list }}" "-b ${{ inputs.branch }}")
        [[ ! -z "${{ inputs.custom-repo }}" ]] && build_opt+=("-k ${{ inputs.custom-repo }}")
        echo "cmd=chrootbuild ${build_opt[@]}"
        sudo chrootbuild ${build_opt[@]}
    - name: sign packages
      shell: bash -O extglob {0}
      run: |      
        cat <(echo -e "${{ inputs.gpg-key }}" | base64 --decode) | gpg --batch --import &>/dev/null
        for p in $(find $PWD -maxdepth 1 -regex '.*\.pkg\.tar\.\(xz\|zst\)'); do
          gpg --pinentry-mode loopback --passphrase "${{ inputs.gpg-passphrase }}" --detach-sign ${p}
        done
    - name: prepare assets transaction
      shell: bash -O extglob {0}
      run: |
        tag=${{inputs.release_tag}}
        while read p; do
          name=$(find . -name ${p}*.zst)
          arch=$(echo ${name} | rev | cut -d- -f1 | rev | cut -d. -f1)
          file=${p}-${tag}-${arch}
          btf=${file}.yml # boxit transaction file
          echo "sha256_pkg: $(sha256sum ${name} | cut -d' ' -f1)" > ${btf}
          echo "sha256_sig: $(sha256sum ${name}.sig | cut -d' ' -f1)" >> ${btf}
          echo "repository: ${{ inputs.repo }}" >> ${btf}
          echo "branch: ${{ inputs.branch }}" >> ${btf}
          tar -czvf ${file}.tar ./${file}*.zst ./${file}*.sig ./${btf}
        done < ${{inputs.packages_list}}.list
        echo "TAG=${tag}" >>$GITHUB_ENV
    - name: publish package
      shell: bash -O extglob {0}
      run: |
        release=${{ inputs.package_list }}-${{ env.TAG }}
        echo ${{ github.token }} | gh auth login --with-token
        gh release create ${release} --title ${release} --repo ${{ github.repository }} --notes "automated release" || echo "release already exists"
        GITHUB_LINK=https://github.com/${GITHUB_REPOSITORY}/releases/download/${release}
        gh release upload ${release} --repo ${GITHUB_REPOSITORY} --clobber ./*.zst ./*.sig ./*.tar
    - name: prepare upload
      shell: bash
      run: |
        echo "## ssh setup"
        mkdir -p /home/runner/.ssh
        touch /home/runner/.ssh/github_actions
        chmod 600 /home/runner/.ssh/github_actions
        ssh-agent -a /tmp/ssh_agent.sock > /dev/null
    - name: push to boxit
      shell: bash -O extglob {0}
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        if [ -z "${{ inputs.boxit-host }}" ] || [ -z "${{ inputs.boxit-target }}" ] || [ -z "${{ inputs.ssh-key }}" ]; then 
          echo "## not (all) credentials given for boxit push"
          exit 0
        fi
        ssh-keyscan -t rsa ${{ inputs.boxit-host }} >> /home/runner/.ssh/known_hosts
        echo "${{ inputs.ssh-key }}" >> /home/runner/.ssh/github_actions
        ssh-add /home/runner/.ssh/github_actions
        rsync -vaPzz --stats -e ssh ./*tar ${{ inputs.boxit-target }}
